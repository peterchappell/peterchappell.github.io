{"version":3,"sources":["webpack:///./src/components/experienceItem.styles.js","webpack:///./src/components/experienceItem.js","webpack:///./src/pages/experience.js"],"names":["containerStyle","css","display","flexDirection","margin","rhythm","maxWidth","contentStyle","graphicContainerStyle","padding","width","graphicStyle","titleStyle","yearStyle","companyStyle","descriptionStyle","order","ExperienceItem","props","startDate","endDate","TagName","title","company","url","description","image","start","end","className","href","target","rel","displayCompany","src","alt","defaultProps","query","experienceList","Experience","data","isContentPadded","allExperienceCsv","edges","map","experienceItemData","node","key","id"],"mappings":"kOAIaA,EAAiBC,YAAI,CAChCC,QAAS,OACTC,cAAe,cACfC,OAAWC,YAAO,GAAZ,KACNC,SAAU,UAGCC,EAAY,6EAMZC,EAAwBP,YAAI,CACvCC,QAAS,QACTO,QAAQ,OAAQJ,YAAO,GAAhB,OACPK,MAAO,UAGIC,EAAY,yCAIZC,EAAU,2CAKVC,EAAS,2CAKTC,EAAY,2CAKZC,EAAmBd,YAAI,CAClCG,OAAWC,YAAO,IAAZ,OACNW,MAAO,IC/BM,SAASC,EAAeC,GAAQ,IAYxBC,EAAWC,EAV9BC,EAQEH,EARFG,QACAC,EAOEJ,EAPFI,MACAC,EAMEL,EANFK,QACAC,EAKEN,EALFM,IACAC,EAIEP,EAJFO,YACAC,EAGER,EAHFQ,MACAC,EAEET,EAFFS,MACAC,EACEV,EADFU,IAqBF,OACE,YAACP,EAAD,CAASpB,IAAKD,GACZ,mBAAKC,IAAKM,GACR,kBAAIN,IAAKW,GAAaU,GACtB,iBAAGrB,IAAKa,GACN,sBAAQe,UAAU,WAAlB,iBAhBe,SAACN,EAASC,GAC/B,OAAKA,EAIH,iBAAGM,KAAMN,EAAKO,OAAO,SAASC,IAAI,cAC/BT,GAJIA,EAeFU,CAAeV,EAASC,IAE3B,iBAAGvB,IAAKY,GACN,sBAAQgB,UAAU,WAAlB,cACA,uBA5BaV,EA4BIQ,GA5BOP,EA4BAQ,GAxBpBT,EAAV,MAAyBC,EAFhBD,KA4BJM,GAAe,iBAAGxB,IAAKc,GAAmBU,IAE7C,mBAAKxB,IAAKO,GACPkB,GACC,mBACEQ,IAAG,qBAAuBR,EAC1BzB,IAAKU,EACLwB,IAAQZ,EAAL,YAQfN,EAAemB,aAAe,CAC5Bf,QAAS,MChEJ,IAAMgB,EAAK,aAoBZC,EAAc,wDAKL,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,KACnC,OACE,YAAC,IAAD,CAAQC,iBAAe,GACrB,oCACA,kBAAIxC,IAAKqC,GACNE,EAAKE,iBAAiBC,MAAMC,KAAI,gBAASC,EAAT,EAAGC,KAAH,OAC/B,YAAC7B,EAAD,CACE8B,IAAKF,EAAmBG,GACxBrB,MAAOkB,EAAmBlB,MAC1BC,IAAKiB,EAAmBjB,IACxBN,MAAOuB,EAAmBvB,MAC1BC,QAASsB,EAAmBtB,QAC5BC,IAAKqB,EAAmBrB,IACxBC,YAAaoB,EAAmBpB,YAChCC,MAAOmB,EAAmBnB","file":"component---src-pages-experience-js-934da32ad38641a9d2e0.js","sourcesContent":["import { css } from \"@emotion/core\";\n\nimport { rhythm } from \"../utils/typography\";\n\nexport const containerStyle = css({\n  display: \"flex\",\n  flexDirection: \"row-reverse\",\n  margin: `${rhythm(2)} 0`,\n  maxWidth: \"700px\",\n});\n\nexport const contentStyle = css({\n  display: \"flex\",\n  flexBasis: \"100%\",\n  flexDirection: \"column\",\n});\n\nexport const graphicContainerStyle = css({\n  display: \"block\",\n  padding: `5px ${rhythm(1)} 0 0`,\n  width: \"100px\",\n});\n\nexport const graphicStyle = css({\n  maxWidth: \"100%\",\n});\n\nexport const titleStyle = css({\n  margin: 0,\n  order: 3,\n});\n\nexport const yearStyle = css({\n  margin: 0,\n  order: 1,\n});\n\nexport const companyStyle = css({\n  margin: 0,\n  order: 5,\n});\n\nexport const descriptionStyle = css({\n  margin: `${rhythm(0.5)} 0 0`,\n  order: 7,\n});\n","import React from \"react\";\n\nimport {\n  containerStyle,\n  contentStyle,\n  graphicContainerStyle,\n  graphicStyle,\n  descriptionStyle,\n  titleStyle,\n  companyStyle,\n  yearStyle,\n} from \"./experienceItem.styles\";\n\nexport default function ExperienceItem(props) {\n  const {\n    TagName,\n    title,\n    company,\n    url,\n    description,\n    image,\n    start,\n    end,\n  } = props;\n\n  const displayDate = (startDate, endDate) => {\n    if (!endDate) {\n      return startDate;\n    }\n    return `${startDate} - ${endDate}`;\n  };\n\n  const displayCompany = (company, url) => {\n    if (!url) {\n      return company;\n    }\n    return (\n      <a href={url} target=\"_blank\" rel=\"noreferrer\">\n        {company}\n      </a>\n    );\n  };\n\n  return (\n    <TagName css={containerStyle}>\n      <div css={contentStyle}>\n        <h3 css={titleStyle}>{title}</h3>\n        <p css={companyStyle}>\n          <strong className=\"sr-only\">Organisation:</strong>\n          {displayCompany(company, url)}\n        </p>\n        <p css={yearStyle}>\n          <strong className=\"sr-only\">Timeframe:</strong>\n          <em>{displayDate(start, end)}</em>\n        </p>\n        {description && <p css={descriptionStyle}>{description}</p>}\n      </div>\n      <div css={graphicContainerStyle}>\n        {image && (\n          <img\n            src={`/experience_logos/${image}`}\n            css={graphicStyle}\n            alt={`${company} logo`}\n          />\n        )}\n      </div>\n    </TagName>\n  );\n}\n\nExperienceItem.defaultProps = {\n  TagName: \"li\",\n};\n","import React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql } from \"gatsby\";\nimport { css } from \"@emotion/core\";\n\nimport ExperienceItem from \"../components/experienceItem\";\n\nexport const query = graphql`\n  query Data {\n    allExperienceCsv {\n      edges {\n        node {\n          id\n          description\n          end\n          start\n          title\n          url\n          company\n          type\n          image\n        }\n      }\n    }\n  }\n`;\n\nconst experienceList = css({\n  listStyleType: \"none\",\n  margin: 0,\n});\n\nexport default function Experience({ data }) {\n  return (\n    <Layout isContentPadded>\n      <h2>Experience</h2>\n      <ul css={experienceList}>\n        {data.allExperienceCsv.edges.map(({ node: experienceItemData }) => (\n          <ExperienceItem\n            key={experienceItemData.id}\n            start={experienceItemData.start}\n            end={experienceItemData.end}\n            title={experienceItemData.title}\n            company={experienceItemData.company}\n            url={experienceItemData.url}\n            description={experienceItemData.description}\n            image={experienceItemData.image}\n          />\n        ))}\n      </ul>\n    </Layout>\n  );\n}\n"],"sourceRoot":""}